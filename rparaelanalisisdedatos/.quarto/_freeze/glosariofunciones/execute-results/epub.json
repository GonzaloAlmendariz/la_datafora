{
  "hash": "3aec7adaa63ba028c4bdbb4326da6886",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n\n\n# Glosario de funciones y operaciones útiles en R\n\n## Vectores\n\nLos vectores son estructuras básicas en R que almacenan datos del mismo tipo.\n\n**Funciones comunes**\n\n1.  **`append`**: Agrega elementos al final de un vector. Utiliza esta función para añadir uno o más elementos a un vector existente.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(1, 2, 3) # Vector inicial\nmi_vector = append(mi_vector, c(4, 5)) # Agrega los números 4 y 5 al final\nmi_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\n\n2.  **`c`**: Combina valores para crear un vector. Es la forma más sencilla de crear un vector.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(1, 2, 3, 4, 5) # Combina los valores 1, 2, 3, 4 y 5 en un vector\nmi_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\n\n3.  **`diff`**: Calcula las diferencias entre elementos consecutivos. Devuelve un nuevo vector con la diferencia entre cada par de elementos consecutivos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(1, 2, 4, 8, 16, 32)\ndiff(mi_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  2  4  8 16\n```\n\n\n:::\n:::\n\n\n\n\n\n4.  **`length`**: Obtiene la longitud de un vector. Te permite conocer cuántos elementos contiene el vector.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(1, 2, 3, 4, 5, 6)\nlength(mi_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n\n\n\n5.  **`rev`**: Invierte el orden de los elementos de un vector. Útil si necesitas trabajar con los elementos en orden inverso.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(1, 2, 3, 4, 5)\nrev(mi_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4 3 2 1\n```\n\n\n:::\n:::\n\n\n\n\n\n6.  **`seq`**: Genera una secuencia de números. Permite definir el número inicial (`from`), el número final (`to`) y el tamaño del paso (`by`).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 0, to = 50, by = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  0  5 10 15 20 25 30 35 40 45 50\n```\n\n\n:::\n:::\n\n\n\n\n\n7.  **`sort`**: Ordena un vector. Puedes ordenar un vector en orden ascendente (por defecto) o descendente utilizando el argumento `decreasing`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(3, 1, 4, 2, 5)\nsort(mi_vector) # Orden ascendente\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nsort(mi_vector, decreasing = TRUE) # Orden descendente\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4 3 2 1\n```\n\n\n:::\n:::\n\n\n\n\n\n8.  **`unique`**: Devuelve los valores únicos de un vector. Elimina duplicados y muestra solo los valores distintos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(1, 1, 2, 3, 3, 4)\nunique(mi_vector)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\n\n\n\n**Operaciones útiles**\n\n1.  **Concatenación de vectores**\\\n    Se pueden combinar múltiples vectores utilizando `c`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1 = c(1, 2, 3)\nvector2 = c(4, 5)\nc(vector1, vector2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\n\n2.  **Repetición de valores**\\\n    Usa `rep` para repetir elementos de un vector. Hay dos opciones principales:\n\n-   `times`: Repite toda la secuencia el número de veces indicado.\n-   `each`: Repite cada elemento de la secuencia el número de veces indicado.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(1:3, times = 2)  # Repite la secuencia completa 1, 2, 3 dos veces\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nrep(1:3, each = 2)   # Repite cada elemento (1, 2, 3) dos veces\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 2 2 3 3\n```\n\n\n:::\n:::\n\n\n\n\n\n3.  **Generación de números aleatorios**\\\n    Usa `sample` para obtener valores aleatorios de un vector.\n\n-   `size`: Especifica cuántos valores quieres seleccionar.\n-   `replace`: Indica si los valores pueden repetirse (`TRUE`) o no (`FALSE`).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10, size = 5)  # Selecciona 5 números aleatorios del 1 al 10\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 4 3 2 8\n```\n\n\n:::\n\n```{.r .cell-code}\nsample(1:10, size = 5, replace = TRUE)  # Permite que los valores se repitan\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 6 2 6 5\n```\n\n\n:::\n:::\n\n\n\n\n\n4.  **Suma de vectores elemento a elemento**\\\n    Si los vectores tienen la misma longitud, los elementos correspondientes se suman automáticamente.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1 = c(1, 2, 3)\nvector2 = c(4, 5, 6)\nvector1 + vector2  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 7 9\n```\n\n\n:::\n:::\n\n\n\n\n\n5.  **Multiplicación elemento a elemento**\\\n    Similar a la suma, pero multiplica los elementos correspondientes.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvector1 = c(2, 4, 6)\nvector2 = c(1, 3, 5)\nvector1 * vector2  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2 12 30\n```\n\n\n:::\n:::\n\n\n\n\n\n6.  **Operaciones lógicas**\\\n    Se aplican condiciones a los elementos del vector, devolviendo un vector lógico (`TRUE` o `FALSE`) para cada elemento. Además, puedes:\n\n-   Contar cuántos elementos cumplen la condición usando `sum()`.\n-   Seleccionar elementos que cumplen la condición usando `[]`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_vector = c(10, 20, 30, 40, 50)\n\n# ¿Cuáles elementos son mayores a 25?\nmi_vector > 25  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE  TRUE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# ¿Cuántos elementos son mayores a 25?\nsum(mi_vector > 25) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Seleccionar elementos mayores a 25\nmi_vector[mi_vector > 25]  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30 40 50\n```\n\n\n:::\n:::\n\n\n\n\n\n## Data.frames\n\nLos **data frames** son estructuras de datos bidimensionales en R, similares a tablas, donde cada columna puede contener un tipo diferente de datos (numéricos, caracteres, etc.).\n\n**Creación y visualización**\n\n1.  **Crear un data frame**\\\n    Usa la función `data.frame()` para crear un data frame combinando vectores como columnas.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_dataframe = data.frame(\n  Nombre = c(\"Ana\", \"Luis\", \"Pedro\", \"Marco\", \"Fernanda\", \"Felix\", \"Diego\"),\n  Edad = c(23, 36, 35, 27, 34, 24, 41),\n  Ciudad = c(\"Ica\", \"Huaraz\", \"Cusco\", \"Cusco\", \"Lima\", \"Iquitos\", \"Huaraz\")\n)\nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad  Ciudad\n1      Ana   23     Ica\n2     Luis   36  Huaraz\n3    Pedro   35   Cusco\n4    Marco   27   Cusco\n5 Fernanda   34    Lima\n6    Felix   24 Iquitos\n7    Diego   41  Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n2.  **Visualizar las primeras y últimas filas**\n\n-   `head()`: Muestra las primeras filas (por defecto 6).\n-   `tail()`: Muestra las últimas filas (por defecto 6).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mi_dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad  Ciudad\n1      Ana   23     Ica\n2     Luis   36  Huaraz\n3    Pedro   35   Cusco\n4    Marco   27   Cusco\n5 Fernanda   34    Lima\n6    Felix   24 Iquitos\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(mi_dataframe, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Nombre Edad  Ciudad\n6  Felix   24 Iquitos\n7  Diego   41  Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n3.  **Obtener la estructura del data frame**\n\n-   `str()`: Muestra la estructura del data frame.\n-   `summary()`: Proporciona estadísticas descriptivas básicas para cada columna.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mi_dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t7 obs. of  3 variables:\n $ Nombre: chr  \"Ana\" \"Luis\" \"Pedro\" \"Marco\" ...\n $ Edad  : num  23 36 35 27 34 24 41\n $ Ciudad: chr  \"Ica\" \"Huaraz\" \"Cusco\" \"Cusco\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(mi_dataframe)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre               Edad          Ciudad         \n Length:7           Min.   :23.00   Length:7          \n Class :character   1st Qu.:25.50   Class :character  \n Mode  :character   Median :34.00   Mode  :character  \n                    Mean   :31.43                     \n                    3rd Qu.:35.50                     \n                    Max.   :41.00                     \n```\n\n\n:::\n:::\n\n\n\n\n\n**Acceso y selección de datos**\n\n4.  **Acceder a una columna** Puedes acceder a una columna específica usando `$` o corchetes (`[ ]`).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_dataframe$Nombre  # Accede a la columna \"Nombre\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Ana\"      \"Luis\"     \"Pedro\"    \"Marco\"    \"Fernanda\" \"Felix\"    \"Diego\"   \n```\n\n\n:::\n\n```{.r .cell-code}\nmi_dataframe[[\"Edad\"]]  # Otra forma de acceder a la columna \"Edad\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23 36 35 27 34 24 41\n```\n\n\n:::\n:::\n\n\n\n\n\n5.  **Acceder a filas específicas** Usa índices de filas con corchetes (`[fila, ]`).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Devuelve la segunda fila\nmi_dataframe[2, ]  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Nombre Edad Ciudad\n2   Luis   36 Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n6.  **Acceder a celdas específicas** Usa índices de filas y columnas con corchetes (`[fila, columna]`).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Devuelve el valor en la fila 2 y columna 3\nmi_dataframe[2, 3]  # Devuelve el valor en la fila 2 y columna 3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Huaraz\"\n```\n\n\n:::\n:::\n\n\n\n\n\n7.  **Seleccionar múltiples columnas o filas** Usa índices o nombres con corchetes.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Selecciona columnas por nombre\nmi_dataframe[, c(\"Nombre\", \"Ciudad\")]  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre  Ciudad\n1      Ana     Ica\n2     Luis  Huaraz\n3    Pedro   Cusco\n4    Marco   Cusco\n5 Fernanda    Lima\n6    Felix Iquitos\n7    Diego  Huaraz\n```\n\n\n:::\n\n```{.r .cell-code}\n # Selecciona las primeras dos filas\nmi_dataframe[1:2, ] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Nombre Edad Ciudad\n1    Ana   23    Ica\n2   Luis   36 Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n**Filtrado de datos**\n\n8.  **Filtrar filas por condiciones** Puedes usar operadores lógicos para filtrar filas.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtra filas donde Edad > 25\nmi_dataframe[mi_dataframe$Edad > 25, ]  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad Ciudad\n2     Luis   36 Huaraz\n3    Pedro   35  Cusco\n4    Marco   27  Cusco\n5 Fernanda   34   Lima\n7    Diego   41 Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n9.  **Filtrar filas usando `%in%`** Filtra filas en base a si un valor pertenece a un conjunto.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmi_dataframe[mi_dataframe$Ciudad %in% c(\"Cusco\", \"Lima\"), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad Ciudad\n3    Pedro   35  Cusco\n4    Marco   27  Cusco\n5 Fernanda   34   Lima\n```\n\n\n:::\n:::\n\n\n\n\n\n**Edición y manipulación**\n\n10. **Añadir una nueva columna** Crea una nueva columna asignando valores directamente.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Añade una columna \"Salario\"\nmi_dataframe$Salario = c(1200, 2340, 1300, 2250, \n                         3000, 2600, 1850) \nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad  Ciudad Salario\n1      Ana   23     Ica    1200\n2     Luis   36  Huaraz    2340\n3    Pedro   35   Cusco    1300\n4    Marco   27   Cusco    2250\n5 Fernanda   34    Lima    3000\n6    Felix   24 Iquitos    2600\n7    Diego   41  Huaraz    1850\n```\n\n\n:::\n:::\n\n\n\n\n\n11. **Eliminar una columna** Usa la función `NULL` para eliminar una columna.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Elimina la columna \"Salario\"\nmi_dataframe$Salario = NULL  \nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad  Ciudad\n1      Ana   23     Ica\n2     Luis   36  Huaraz\n3    Pedro   35   Cusco\n4    Marco   27   Cusco\n5 Fernanda   34    Lima\n6    Felix   24 Iquitos\n7    Diego   41  Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n12. **Renombrar columnas** Modifica los nombres de las columnas utilizando `colnames()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cambia los nombres de las columnas\ncolnames(mi_dataframe) = c(\"Nombre\", \"Edad\", \"Vivienda\")  \nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad Vivienda\n1      Ana   23      Ica\n2     Luis   36   Huaraz\n3    Pedro   35    Cusco\n4    Marco   27    Cusco\n5 Fernanda   34     Lima\n6    Felix   24  Iquitos\n7    Diego   41   Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n13. **Ordenar el data frame** Usa la función `order()` para ordenar las filas según una columna.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ordena por la columna \"Edad\"\nmi_dataframe = mi_dataframe[order(mi_dataframe$Edad), ] \n\nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Nombre Edad Vivienda\n1      Ana   23      Ica\n6    Felix   24  Iquitos\n4    Marco   27    Cusco\n5 Fernanda   34     Lima\n3    Pedro   35    Cusco\n2     Luis   36   Huaraz\n7    Diego   41   Huaraz\n```\n\n\n:::\n:::\n\n\n\n\n\n14. **Combinar data frames**\n\n-   `rbind()`: Combina data frames por filas.\n-   `cbind()`: Combina data frames por columnas.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combinar filas\notro_dataframe = data.frame(Nombre = \"Oscar\", Edad = 28, Vivienda = \"Lima\")\nmi_dataframe = rbind(mi_dataframe, otro_dataframe)\nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Nombre Edad Vivienda\n1       Ana   23      Ica\n6     Felix   24  Iquitos\n4     Marco   27    Cusco\n5  Fernanda   34     Lima\n3     Pedro   35    Cusco\n2      Luis   36   Huaraz\n7     Diego   41   Huaraz\n11    Oscar   28     Lima\n```\n\n\n:::\n\n```{.r .cell-code}\n# Combinar columnas\nnueva_columna = data.frame(Salario = c(1200, 2340, 1300, 2250, \n                         3000, 2600, 1850, 2300))\nmi_dataframe = cbind(mi_dataframe, nueva_columna)\nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Nombre Edad Vivienda Salario\n1       Ana   23      Ica    1200\n6     Felix   24  Iquitos    2340\n4     Marco   27    Cusco    1300\n5  Fernanda   34     Lima    2250\n3     Pedro   35    Cusco    3000\n2      Luis   36   Huaraz    2600\n7     Diego   41   Huaraz    1850\n11    Oscar   28     Lima    2300\n```\n\n\n:::\n:::\n\n\n\n\n\n15. **Eliminar filas** Usa índices negativos para eliminar filas.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Elimina la segunda fila\nmi_dataframe = mi_dataframe[-2, ] \n\nmi_dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Nombre Edad Vivienda Salario\n1       Ana   23      Ica    1200\n4     Marco   27    Cusco    1300\n5  Fernanda   34     Lima    2250\n3     Pedro   35    Cusco    3000\n2      Luis   36   Huaraz    2600\n7     Diego   41   Huaraz    1850\n11    Oscar   28     Lima    2300\n```\n\n\n:::\n:::\n\n\n\n\n\n**Resúmenes y cálculos**\n\n16. **Obtener valores únicos** Usa `unique()` para obtener valores únicos en una columna.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(mi_dataframe$Vivienda)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Ica\"    \"Cusco\"  \"Lima\"   \"Huaraz\"\n```\n\n\n:::\n:::\n\n\n\n\n\n17. **Contar filas y columnas** Usa las funciones `nrow()` y `ncol()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Número de filas\nnrow(mi_dataframe)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n\n```{.r .cell-code}\n# Número de columnas\nncol(mi_dataframe)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n\n\n18. **Calcular estadísticas básicas** Aplica funciones como `mean()`, `sum()`, `min()`, `max()` a columnas numéricas.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Edad promedio\nmean(mi_dataframe$Edad)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32\n```\n\n\n:::\n\n```{.r .cell-code}\n# Suma total de las edades\nsum(mi_dataframe$Edad)   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 224\n```\n\n\n:::\n:::\n\n\n\n\n\n19. **Tablas de frecuencias** Usa `table()` para crear una tabla de frecuencias.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(mi_dataframe$Vivienda)  # Frecuencia de valores en la columna \"Ciudad\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n Cusco Huaraz    Ica   Lima \n     2      2      1      2 \n```\n\n\n:::\n:::\n\n\n\n\n\nA partir de ahora trabajaremos con una encuesta ficticia diseñada para analizar la relación entre **edad, ingreso, nivel educativo y satisfacción personal**. Contiene información sobre **500 personas**.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nencuesta = read_csv('glosario.csv')\n```\n:::\n\n\n\n\n\n## Limpieza y reestructuración de datos\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n\nLa limpieza de datos es un paso fundamental en todo análisis cuantitativo, ya que garantiza la calidad, consistencia y fiabilidad de los resultados. Errores como nombres mal escritos, valores faltantes, codificaciones inconsistentes o estructuras duplicadas pueden distorsionar el análisis y generar conclusiones erróneas. T\n\nTomaremos como punto de referencia un dataset con múltiples problemas intencionados, el cual servirá como ejemplo para aplicar herramientas como `janitor`, `stringr`, `naniar` y `tidyr`, de gran ayuda para transformar datos sucios en insumos analíticos ordenados y listos para modelar o visualizar.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = read_csv('limpieza.csv')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df, 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 9\n   `Nombre completo`  Edad sexo  ingreso_mensual region encuesta_fecha puntaje_1\n   <chr>             <dbl> <chr>           <dbl> <chr>  <chr>              <dbl>\n 1 Ana Perez            29 feme…          1500   lima   2025-04-11             5\n 2 Sofia_Ramos          31 F                 2   Lima   2025-04-11             3\n 3 mario vargas         23 masc…          1500   Arequ… 2025/04/12            NA\n 4 CARLOS DIAZ          NA F              3000   Cusco  2025/04/10            NA\n 5 M@rio V@rg@s         NA masc…          3000   LIMA   10-04-2025             1\n 6 ana perez            31 masc…             1.5 Cusco  2025/04/10             3\n 7 Sofi@ R@mos          23 nan               2   LIMA   10-04-2025            NA\n 8 ANA PEREZ            23 F                 1.5 AREQU… <NA>                  NA\n 9 LUIS GÓMEZ           40 F                NA   lima   2025-04-11             1\n10 An@ Perez            29 nan            3000   Arequ… 2025/04/10             5\n11 An@ Perez            35 masc…            NA   LIMA   2025-04-11             3\n12 Ana Perez            23 F                 2   Lima   2025-04-11             4\n# ℹ 2 more variables: puntaje_2 <dbl>, puntaje_3 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n1.  Limpieza de nombre de columnas\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Nombre completo\" \"Edad\"            \"sexo\"            \"ingreso_mensual\"\n[5] \"region\"          \"encuesta_fecha\"  \"puntaje_1\"       \"puntaje_2\"      \n[9] \"puntaje_3\"      \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = df %>% \n  clean_names()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"nombre_completo\" \"edad\"            \"sexo\"            \"ingreso_mensual\"\n[5] \"region\"          \"encuesta_fecha\"  \"puntaje_1\"       \"puntaje_2\"      \n[9] \"puntaje_3\"      \n```\n\n\n:::\n:::\n\n\n\n\n\n2.  Limpieza de strings y numericos\n\nLos errores tipográficos, los formatos inconsistentes y las codificaciones irregulares son comunes en datos reales, especialmente en variables de texto como nombres o categorías como el sexo.\n\n**Limpieza de** `nombre_completo`\n\nPrimero, cargamos el paquete `stringr`, un paquete dedicado a trabajar con cadenas de texto.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(stringr)\n```\n:::\n\n\n\n\n\nLuego, realizamos una transformación paso a paso de la variable `nombre_completo` para corregir errores comunes, estandarizar escritura y eliminar inconsistencias:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = df %>%\n  mutate(\n    # Paso 1: Pasamos todo a minúsculas para evitar duplicidades por mayúsculas\n    nombre_completo = str_to_lower(nombre_completo),\n\n    # Paso 2: Reemplazamos caracteres con tilde o especiales por sus equivalentes planos\n    nombre_completo = str_replace_all(nombre_completo, \"á\", \"a\"),\n    nombre_completo = str_replace_all(nombre_completo, \"é\", \"e\"),\n    nombre_completo = str_replace_all(nombre_completo, \"í\", \"i\"),\n    nombre_completo = str_replace_all(nombre_completo, \"ó\", \"o\"),\n    nombre_completo = str_replace_all(nombre_completo, \"ú\", \"u\"),\n    nombre_completo = str_replace_all(nombre_completo, \"ñ\", \"n\"),\n\n    # Paso 3: Eliminamos símbolos no deseados como @, guiones bajos, espacios múltiples\n    nombre_completo = str_replace_all(nombre_completo, \"@\", \"a\"),\n    nombre_completo = str_replace_all(nombre_completo, \"_\", \" \"),\n    nombre_completo = str_replace_all(nombre_completo, \"[[:space:]]+\", \" \"),\n    nombre_completo = str_trim(nombre_completo),  # elimina espacios al inicio o final\n\n    # Paso 4: Correcciones específicas a errores conocidos por observación del dataset\n    nombre_completo = case_when(\n      str_detect(nombre_completo, \"sofiaramos\") ~ \"sofia ramos\",\n      str_detect(nombre_completo, \"anaperez\") ~ \"ana perez\",\n      str_detect(nombre_completo, \"luciahuerta\") ~ \"lucia huerta\",\n      str_detect(nombre_completo, \"mariovargas\") ~ \"mario vargas\",\n      str_detect(nombre_completo, \"carlosdiaz\") ~ \"carlos diaz\",\n      str_detect(nombre_completo, \"luisgomez\") ~ \"luis gomez\",\n      TRUE ~ nombre_completo\n    ),\n\n    # Paso 5: Finalizamos capitalizando la primera letra de cada palabra \n    nombre_completo = str_to_title(nombre_completo)\n  )\n```\n:::\n\n\n\n\n\nCon estas transformaciones, se evita que registros iguales aparezcan como diferentes por errores de digitación, acentos o diferencias en capitalización.\n\n**Homogeneización de la variable** `sexo`\n\nEn variables categóricas como `sexo`, donde pueden coexistir múltiples formas de referirse a una misma categoría (\"masculino\", \"m\", \"hombre\", etc.), es fundamental normalizar los valores. Aplicamos una transformación similar:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = df %>%\n  mutate(\n    # Paso 1: Todo a minúsculas\n    sexo = tolower(sexo),\n\n    # Paso 2: Reescribimos variantes en etiquetas estándar\n    sexo = case_when(\n      sexo %in% c(\"masculino\", \"m\", \"hombre\") ~ \"masculino\",\n      sexo %in% c(\"femenino\", \"f\", \"mujer\") ~ \"femenino\",\n      TRUE ~ NA_character_  # valores irreconocibles se dejan como NA\n    )\n  )\n```\n:::\n\n\n\n\n\nEn este punto, la base ya está considerablemente más limpia y lista para ser usada con métodos estadísticos o gráficos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 9\n  nombre_completo  edad sexo     ingreso_mensual region encuesta_fecha puntaje_1\n  <chr>           <dbl> <chr>              <dbl> <chr>  <chr>              <dbl>\n1 Ana Perez          29 femenino          1500   lima   2025-04-11             5\n2 Sofia Ramos        31 femenino             2   Lima   2025-04-11             3\n3 Mario Vargas       23 masculi…          1500   Arequ… 2025/04/12            NA\n4 Carlos Diaz        NA femenino          3000   Cusco  2025/04/10            NA\n5 Mario Vargas       NA masculi…          3000   LIMA   10-04-2025             1\n6 Ana Perez          31 masculi…             1.5 Cusco  2025/04/10             3\n# ℹ 2 more variables: puntaje_2 <dbl>, puntaje_3 <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n3.  Valores perdidos\n\nEn el análisis de datos reales, lidiar con valores perdidos es inevitable. Ya sea por errores en la recolección, datos incompletos o fallas de ingreso, siempre es necesario diagnosticar y decidir cómo abordarlos.\n\nEl paquete `naniar` facilita la visualización y exploración de patrones de `NA` en un dataset. Permite entender en qué columnas se concentran los valores faltantes y si hay patrones comunes entre ellos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(naniar)\n```\n:::\n\n\n\n\n\nUna forma rápida de visualizar cuántos `NA` hay por variable es:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_miss_var(df)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-47-1.png)\n:::\n:::\n\n\n\n\n\nY si deseamos identificar observaciones con múltiples valores perdidos, usamos:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_miss_case(df)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-48-1.png)\n:::\n:::\n\n\n\n\n\nEsto nos ayuda a decidir si queremos eliminar observaciones o columnas con muchos datos ausentes o proceder a imputarlos. A veces basta con eliminar observaciones incompletas si son pocas o si el análisis requiere datos completos. `tidyr` ofrece funciones útiles como `drop_na()`:\n\nEliminar observaciones con `NA` **en columnas clave** (por ejemplo, nombre o sexo):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = df %>%\n  drop_na(nombre_completo, sexo, encuesta_fecha) \n\ndim(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 67  9\n```\n\n\n:::\n:::\n\n\n\n\n\nEliminar observaciones con al menos un `NA` en **cualquier columna**:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  drop_na() %>% \n  dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32  9\n```\n\n\n:::\n:::\n\n\n\n\n\nEsto reduce el tamaño de la base pero garantiza integridad completa. Sin embargo, no siempre es deseable perder datos. En esos casos, se puede imputar.\n\nEl paquete `mice` (*Multivariate Imputation by Chained Equations*) permite realizar una **imputación más inteligente**, modelando los valores ausentes con base en otras variables.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mice)\n```\n:::\n\n\n\n\n\nEste paquete nos permite aplicar un algoritmo de imputación. Por ejemplo, para una imputación rápida:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimputado = mice(df, m = 1, method = \"pmm\", seed = 123)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n iter imp variable\n  1   1  edad  ingreso_mensual  puntaje_1  puntaje_2  puntaje_3\n  2   1  edad  ingreso_mensual  puntaje_1  puntaje_2  puntaje_3\n  3   1  edad  ingreso_mensual  puntaje_1  puntaje_2  puntaje_3\n  4   1  edad  ingreso_mensual  puntaje_1  puntaje_2  puntaje_3\n  5   1  edad  ingreso_mensual  puntaje_1  puntaje_2  puntaje_3\n```\n\n\n:::\n:::\n\n\n\n\n\n-   `m = 1`: número de datasets imputados. Se puede aumentar si se desea evaluar incertidumbre.\n-   `method = \"pmm\"`: *predictive mean matching*, útil para imputar variables numéricas.\n-   `seed`: asegura que los resultados sean reproducibles.\n\nUna vez realizado el proceso, se extrae el dataset completo con:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = complete(imputado)\n```\n:::\n\n\n\n\n\nCon esto, se preservan todas las observaciones, pero con los valores faltantes sustituidos por predicciones consistentes con la estructura de los datos. Este método es especialmente útil cuando hay varias variables correlacionadas o cuando perder datos no es una opción que podamos costear.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_miss_var(df)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-54-1.png)\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nombre_completo edad      sexo ingreso_mensual   region encuesta_fecha\n1       Ana Perez   29  femenino          1500.0     lima     2025-04-11\n2     Sofia Ramos   31  femenino             2.0     Lima     2025-04-11\n3    Mario Vargas   23 masculino          1500.0 Arequipa     2025/04/12\n4     Carlos Diaz   23  femenino          3000.0    Cusco     2025/04/10\n5    Mario Vargas   29 masculino          3000.0     LIMA     10-04-2025\n6       Ana Perez   31 masculino             1.5    Cusco     2025/04/10\n  puntaje_1 puntaje_2 puntaje_3\n1         5         2         2\n2         3         3         3\n3         3         2         5\n4         5         4         1\n5         1         4         4\n6         3         5         5\n```\n\n\n:::\n:::\n\n\n\n\n\n3.  Observaciones duplicados\n\nLos duplicados pueden surgir por errores en la recolección, registros múltiples del mismo individuo o procesos de integración de bases de datos. Si no se detectan y corrigen, pueden sesgar promedios, inflar conteos y distorsionar cualquier análisis posterior.\n\nLa forma más directa de detectar duplicados es verificar si existen filas exactamente iguales en todas las columnas:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  duplicated() %>% \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n\nSi se desea ver cuáles son esos duplicados exactos:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  filter(duplicated(.))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nombre_completo edad      sexo ingreso_mensual   region encuesta_fecha\n1     Sofia Ramos   29  femenino          3000.0     LIMA     2025/04/10\n2     Carlos Diaz   29  femenino          1500.0    Cuzco     10-04-2025\n3    Mario Vargas   31 masculino             1.5     Lima     10-04-2025\n4    Mario Vargas   23 masculino          1500.0 Arequipa     2025/04/12\n5       Ana Perez   31 masculino             1.5    Cusco     2025/04/10\n  puntaje_1 puntaje_2 puntaje_3\n1         5         2         1\n2         5         1         1\n3         4         2         2\n4         3         2         5\n5         3         5         5\n```\n\n\n:::\n:::\n\n\n\n\n\nPodemos eliminarlos con `distinct()`, que retiene únicamente las filas únicas:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = df %>% \n  distinct()\n```\n:::\n\n\n\n\n\nLo que nos deja con:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>% \n  duplicated() %>% \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\n\n4.  Tidyr\n\nUna vez corregidos errores en las variables categóricas y estandarizados los valores faltantes o inconsistentes, es común encontrarse con problemas estructurales. Algunas columnas pueden estar duplicando información, otras pueden combinar múltiples variables en una sola. Aquí es donde entra en juego el paquete `tidyr`.\n\nEste paquete permite reorganizar los datos sin alterar su contenido: separar, unir, pivotear, rellenar o completar estructuras incompletas. Por ejemplo:\n\n**Separar: descomponer** `nombre_completo` **en** `nombre` **y** `apellido`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\n# Separar nuevamente desde nombre_completo para asegurar consistencia\ndf = df %>%\n  separate(nombre_completo, into = c(\"nombre\", \"apellido\"), sep = \" \", extra = \"merge\", remove = FALSE)\n```\n:::\n\n\n\n\n\n-   `sep = \" \"`: se separa por el primer espacio en blanco.\n-   `extra = \"merge\"`: en caso haya más de dos componentes (ej. \"Maria del Carmen\"), los combina en `apellido`.\n-   `remove = FALSE`: conservamos la columna original por trazabilidad.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  nombre_completo nombre apellido edad      sexo ingreso_mensual   region\n1       Ana Perez    Ana    Perez   29  femenino          1500.0     lima\n2     Sofia Ramos  Sofia    Ramos   31  femenino             2.0     Lima\n3    Mario Vargas  Mario   Vargas   23 masculino          1500.0 Arequipa\n4     Carlos Diaz Carlos     Diaz   23  femenino          3000.0    Cusco\n5    Mario Vargas  Mario   Vargas   29 masculino          3000.0     LIMA\n6       Ana Perez    Ana    Perez   31 masculino             1.5    Cusco\n  encuesta_fecha puntaje_1 puntaje_2 puntaje_3\n1     2025-04-11         5         2         2\n2     2025-04-11         3         3         3\n3     2025/04/12         3         2         5\n4     2025/04/10         5         4         1\n5     10-04-2025         1         4         4\n6     2025/04/10         3         5         5\n```\n\n\n:::\n:::\n\n\n\n\n\n**Unir: combinar** `puntaje_1`, `puntaje_2` **y** `puntaje_3` **en una sola columna**\n\nEn análisis posteriores puede ser útil pivotear los puntajes para analizar cada respuesta como una fila individual. Esto facilita la creación de gráficos o modelos que trabajen sobre respuestas individuales:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf = df %>%\n  # Sumamos todas las que empiezan con 'puntaje'\n  pivot_longer(cols = starts_with(\"puntaje_\"),\n               names_to = \"pregunta\",\n               values_to = \"puntaje\")\n```\n:::\n\n\n\n\n\nAhora cada persona aparece tres veces (una por pregunta), lo cual permite comparar puntuaciones medias entre preguntas o agrupar por categorías ahora que tenemos la variable categórica `pregunta`.\n\nAsí quedo nuestro dataset luego de la limpieza\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df, 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 10\n   nombre_completo nombre apellido  edad sexo      ingreso_mensual region  \n   <chr>           <chr>  <chr>    <dbl> <chr>               <dbl> <chr>   \n 1 Ana Perez       Ana    Perez       29 femenino             1500 lima    \n 2 Ana Perez       Ana    Perez       29 femenino             1500 lima    \n 3 Ana Perez       Ana    Perez       29 femenino             1500 lima    \n 4 Sofia Ramos     Sofia  Ramos       31 femenino                2 Lima    \n 5 Sofia Ramos     Sofia  Ramos       31 femenino                2 Lima    \n 6 Sofia Ramos     Sofia  Ramos       31 femenino                2 Lima    \n 7 Mario Vargas    Mario  Vargas      23 masculino            1500 Arequipa\n 8 Mario Vargas    Mario  Vargas      23 masculino            1500 Arequipa\n 9 Mario Vargas    Mario  Vargas      23 masculino            1500 Arequipa\n10 Carlos Diaz     Carlos Diaz        23 femenino             3000 Cusco   \n11 Carlos Diaz     Carlos Diaz        23 femenino             3000 Cusco   \n12 Carlos Diaz     Carlos Diaz        23 femenino             3000 Cusco   \n# ℹ 3 more variables: encuesta_fecha <chr>, pregunta <chr>, puntaje <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\n## Dplyr para manipulacion de datos\n\nEl paquete dplyr es uno de los más utilizados en R para manipulación y transformación de datos. El operador %\\>% (pipe) es una herramienta central que permite encadenar funciones, pasando el resultado de una función como entrada a la siguiente.\n\n\n\n\n\n\n\n\n\n\n\n1.  `filter`: Filtrar filas según una condición\n\nEsta función selecciona solo las filas que cumplen con una o más condiciones.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtrar encuestados mayores de 30 años\nencuesta %>%\n  filter(Edad > 30) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n      ID  Edad Genero Ingreso Educacion     Satisfaccion\n   <dbl> <dbl> <chr>    <dbl> <chr>                <dbl>\n 1     2    33 M         2595 Secundaria               3\n 2     3    51 F         3806 Secundaria               3\n 3     4    36 M         2907 Universitaria            3\n 4     5    36 M         2707 Secundaria               4\n 5     6    52 F         3540 Universitaria            5\n 6     7    40 M         3506 Secundaria               4\n 7    10    31 F         2452 Secundaria               3\n 8    11    47 F         3620 Universitaria            3\n 9    12    39 F         3258 Universitaria            2\n10    13    39 F         3258 Universitaria            4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtrar mujeres con educación universitaria\nencuesta %>%\n  filter(Genero == \"F\", Educacion == \"Universitaria\") %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n      ID  Edad Genero Ingreso Educacion     Satisfaccion\n   <dbl> <dbl> <chr>    <dbl> <chr>                <dbl>\n 1     6    52 F         3540 Universitaria            5\n 2    11    47 F         3620 Universitaria            3\n 3    12    39 F         3258 Universitaria            2\n 4    13    39 F         3258 Universitaria            4\n 5    20    30 F         3244 Universitaria            3\n 6    24    28 F         1591 Universitaria            2\n 7    28    37 F         2711 Universitaria            2\n 8    37    41 F         3449 Universitaria            3\n 9    47    31 F         2744 Universitaria            3\n10    58    41 F         4131 Universitaria            3\n```\n\n\n:::\n:::\n\n\n\n\n\n2.  `select`: Seleccionar columnas específicas\n\nEsta función te permite elegir las columnas necesarias.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleccionar columnas relevantes\nencuesta %>%\n  select(ID, Genero, Satisfaccion) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 3\n      ID Genero Satisfaccion\n   <dbl> <chr>         <dbl>\n 1     1 F                 3\n 2     2 M                 3\n 3     3 F                 3\n 4     4 M                 3\n 5     5 M                 4\n 6     6 F                 5\n 7     7 M                 4\n 8     8 F                 2\n 9     9 F                 3\n10    10 F                 3\n```\n\n\n:::\n:::\n\n\n\n\n\n3.  `mutate`: Crear o modificar columnas\n\nAñade nuevas columnas o modifica las existentes.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear una columna que clasifique a las personas como \"Joven\" o \"Adulto\"\nencuesta %>%\n# Personas menores o iguales a 30 como \"Jovenes\"\n  mutate(RangoEdad = \n           ifelse(Edad <= 30, \"Joven\", \"Adulto\")) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n      ID  Edad Genero Ingreso Educacion     Satisfaccion RangoEdad\n   <dbl> <dbl> <chr>    <dbl> <chr>                <dbl> <chr>    \n 1     1    29 F         3219 Primaria                 3 Joven    \n 2     2    33 M         2595 Secundaria               3 Adulto   \n 3     3    51 F         3806 Secundaria               3 Adulto   \n 4     4    36 M         2907 Universitaria            3 Adulto   \n 5     5    36 M         2707 Secundaria               4 Adulto   \n 6     6    52 F         3540 Universitaria            5 Adulto   \n 7     7    40 M         3506 Secundaria               4 Adulto   \n 8     8    22 F         1999 Secundaria               2 Joven    \n 9     9    28 F         1381 Primaria                 3 Joven    \n10    10    31 F         2452 Secundaria               3 Adulto   \n```\n\n\n:::\n:::\n\n\n\n\n\n4.  `arrange`: Ordenar filas\n\nOrdena las filas del data frame según una o más columnas.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ordenar por edad de menor a mayor\nencuesta %>%\n  arrange(Edad) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n      ID  Edad Genero Ingreso Educacion     Satisfaccion\n   <dbl> <dbl> <chr>    <dbl> <chr>                <dbl>\n 1    18    18 M         1788 Secundaria               3\n 2    26    18 F         2839 Primaria                 3\n 3    72    18 M         2271 Secundaria               2\n 4   108    18 M         1725 Universitaria            3\n 5   135    18 M         2171 Universitaria            2\n 6   268    18 M         1269 Universitaria            2\n 7   281    18 F         1302 Universitaria            2\n 8   307    18 F         1497 Universitaria            2\n 9   313    18 M         2458 Secundaria               3\n10   336    18 F         1388 Universitaria            3\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ordenar por satisfacción de mayor a menor\nencuesta %>%\n  arrange(desc(Satisfaccion)) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n      ID  Edad Genero Ingreso Educacion     Satisfaccion\n   <dbl> <dbl> <chr>    <dbl> <chr>                <dbl>\n 1     6    52 F         3540 Universitaria            5\n 2    44    57 M         4017 Secundaria               5\n 3    98    50 M         4023 Secundaria               5\n 4   122    26 F         2372 Universitaria            5\n 5   128    36 M         3722 Universitaria            5\n 6   161    46 F         4588 Universitaria            5\n 7   170    39 M         3747 Universitaria            5\n 8   212    37 M         4000 Universitaria            5\n 9   231    55 F         4903 Universitaria            5\n10   265    58 M         3794 Secundaria               5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ordenar primero por género y luego por nivel educativo\nencuesta %>%\n  arrange(Genero, desc(Educacion)) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 6\n      ID  Edad Genero Ingreso Educacion     Satisfaccion\n   <dbl> <dbl> <chr>    <dbl> <chr>                <dbl>\n 1     6    52 F         3540 Universitaria            5\n 2    11    47 F         3620 Universitaria            3\n 3    12    39 F         3258 Universitaria            2\n 4    13    39 F         3258 Universitaria            4\n 5    20    30 F         3244 Universitaria            3\n 6    24    28 F         1591 Universitaria            2\n 7    28    37 F         2711 Universitaria            2\n 8    37    41 F         3449 Universitaria            3\n 9    47    31 F         2744 Universitaria            3\n10    58    41 F         4131 Universitaria            3\n```\n\n\n:::\n:::\n\n\n\n\n\n5.  Resumir datos (agrupados)\n\n-   `reframe` Calcula métricas agregadas como promedios, totales o máximos en devolver cualquier número de filas por grupo.\n-   `group_by()` agrupa los datos según una o más columnas. Esto significa que las filas se organizan en grupos definidos por los valores únicos de las columnas seleccionadas sin modificar el contenido del data framepor si solo.\n\n`reframe\\`: Calculamos la satisfacción promedio y el rango de edades por género, reduciendo los datos a una fila por grupo.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular métricas resumidas por género\nencuesta %>%\n  group_by(Genero) %>% # Agrupar por género\n  reframe(\n# Promedio de satisfacción\n        SatisfaccionPromedio = mean(Satisfaccion)\n  ) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  Genero SatisfaccionPromedio\n  <chr>                 <dbl>\n1 F                      2.90\n2 M                      2.89\n```\n\n\n:::\n:::\n\n\n\n\n\n`reframe` con `group_by`: Agrupar y resumir datos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular satisfacción promedio por género\nresumen_genero = encuesta %>%\n  group_by(Genero) %>%\n  reframe(SatisfaccionPromedio = mean(Satisfaccion))\nresumen_genero\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  Genero SatisfaccionPromedio\n  <chr>                 <dbl>\n1 F                      2.90\n2 M                      2.89\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular edad máxima y mínima por nivel educativo\nresumen_educacion = encuesta %>%\n  group_by(Educacion) %>%\n  reframe(\n    EdadMaxima = max(Edad),\n    EdadMinima = min(Edad)\n  )\nresumen_educacion\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  Educacion     EdadMaxima EdadMinima\n  <chr>              <dbl>      <dbl>\n1 Primaria              56         18\n2 Secundaria            61         18\n3 Universitaria         65         18\n```\n\n\n:::\n:::\n\n\n\n\n\nPuedes realizar varias operaciones en una sola secuencia. Por ejemplo:\n\n**Filtrar adultos, calcular satisfacción promedio por rango de edad y ordenar resultados.**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtrar, agrupar y ordenar\nencuesta %>%\n# Personas menores o iguales a 30 como \"Jovenes\"\n  mutate(RangoEdad = \n           ifelse(Edad <= 30, \"Joven\", \"Adulto\")) %>%\n# Agrupar por género\n      group_by(RangoEdad) %>%   \n# Calcular métricas resumidas\n      summarise(             \n      SatisfaccionPromedio = mean(Satisfaccion)) %>%\n# Ordenar por satisfacción promedio\n  arrange(desc(SatisfaccionPromedio)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  RangoEdad SatisfaccionPromedio\n  <chr>                    <dbl>\n1 Adulto                    3.01\n2 Joven                     2.62\n```\n\n\n:::\n:::\n\n\n\n\n\nSí, hay varias funciones interesantes en **`dplyr`** que podrías agregar a tu apartado para ampliar las capacidades de manipulación de datos. Aquí te dejo algunas funciones adicionales que pueden mejorar el análisis y limpieza de datos:\n\n6.  `rename()`: Renombrar columnas\n\n    Si necesitas cambiar el nombre de una columna, puedes usar `rename()`.\\\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencuesta %>%\n  rename(Satisfaccion_Gestion = Satisfaccion) %>% \n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n     ID  Edad Genero Ingreso Educacion  Satisfaccion_Gestion\n  <dbl> <dbl> <chr>    <dbl> <chr>                     <dbl>\n1     1    29 F         3219 Primaria                      3\n2     2    33 M         2595 Secundaria                    3\n3     3    51 F         3806 Secundaria                    3\n```\n\n\n:::\n:::\n\n\n\n\n\n7.  `relocate()`: Reordenar columnas\n\n    Si quieres cambiar el orden de las columnas en un `data.frame`, usa `relocate()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencuesta %>%\n  relocate(Satisfaccion, .before = ID) %>% \n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n  Satisfaccion    ID  Edad Genero Ingreso Educacion \n         <dbl> <dbl> <dbl> <chr>    <dbl> <chr>     \n1            3     1    29 F         3219 Primaria  \n2            3     2    33 M         2595 Secundaria\n3            3     3    51 F         3806 Secundaria\n```\n\n\n:::\n:::\n\n\n\n\n\n8.  `distinct()`: Eliminar duplicados\n\n    Si hay valores duplicados en el `data.frame`, `distinct()` los elimina y deja solo las observaciones únicas.\\\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencuesta %>%\n  distinct() %>% \n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n     ID  Edad Genero Ingreso Educacion  Satisfaccion\n  <dbl> <dbl> <chr>    <dbl> <chr>             <dbl>\n1     1    29 F         3219 Primaria              3\n2     2    33 M         2595 Secundaria            3\n3     3    51 F         3806 Secundaria            3\n```\n\n\n:::\n:::\n\n\n\n\n\n9.  `count()`: Contar frecuencias de una variable categórica\n\n    Puedes contar la cantidad de observaciones por categoría.\\\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nencuesta %>%\n  count(Educacion)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  Educacion         n\n  <chr>         <int>\n1 Primaria        100\n2 Secundaria      152\n3 Universitaria   248\n```\n\n\n:::\n:::\n\n\n\n\n\n10. `slice()`: Seleccionar filas específicas\n\n    Si necesitas extraer ciertas filas según su posición:\\\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleccionar las primeras 3 filas\nencuesta %>%\n  slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 6\n     ID  Edad Genero Ingreso Educacion  Satisfaccion\n  <dbl> <dbl> <chr>    <dbl> <chr>             <dbl>\n1     1    29 F         3219 Primaria              3\n2     2    33 M         2595 Secundaria            3\n3     3    51 F         3806 Secundaria            3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Seleccionar la fila número 5\nencuesta %>%\n  slice(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n     ID  Edad Genero Ingreso Educacion  Satisfaccion\n  <dbl> <dbl> <chr>    <dbl> <chr>             <dbl>\n1     5    36 M         2707 Secundaria            4\n```\n\n\n:::\n:::\n\n\n\n\n\n11. `case_when()`: Crear variables con múltiples condiciones\n\n    Es una versión más potente de `ifelse()`, útil cuando tienes muchas condiciones.\\\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear una columna con niveles de satisfacción\nencuesta %>%\n  mutate(Satisfaccion_Categoria = case_when(\n    Satisfaccion >= 4 ~ \"Alta\",\n    Satisfaccion == 3 ~ \"Media\",\n    TRUE ~ \"Baja\"\n  )) %>% \n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 7\n      ID  Edad Genero Ingreso Educacion     Satisfaccion Satisfaccion_Categoria\n   <dbl> <dbl> <chr>    <dbl> <chr>                <dbl> <chr>                 \n 1     1    29 F         3219 Primaria                 3 Media                 \n 2     2    33 M         2595 Secundaria               3 Media                 \n 3     3    51 F         3806 Secundaria               3 Media                 \n 4     4    36 M         2907 Universitaria            3 Media                 \n 5     5    36 M         2707 Secundaria               4 Alta                  \n 6     6    52 F         3540 Universitaria            5 Alta                  \n 7     7    40 M         3506 Secundaria               4 Alta                  \n 8     8    22 F         1999 Secundaria               2 Baja                  \n 9     9    28 F         1381 Primaria                 3 Media                 \n10    10    31 F         2452 Secundaria               3 Media                 \n```\n\n\n:::\n:::\n\n\n\n\n\n## Ggplot para la elaboración de gráficos\n\nEl paquete **`ggplot2`** es una herramienta poderosa para la visualización de datos en R. Se basa en **capas (`layers`)**, lo que permite personalizar gráficos de manera progresiva.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\n\n\nHay algunos argumentos generales que pueden usarse en la mayoría de gráficos\n\n| **Argumento** | **Descripción**                                   |\n|---------------|---------------------------------------------------|\n| `color`       | Color del borde de elementos gráficos             |\n| `fill`        | Color de relleno en elementos como barras o áreas |\n| `alpha`       | Nivel de transparencia (0 a 1)                    |\n| `size`        | Tamaño de puntos, líneas o texto                  |\n| `shape`       | Forma de los puntos (en `geom_point()`)           |\n| `linetype`    | Tipo de línea (continua, punteada, etc.)          |\n| `stroke`      | Grosor del borde en puntos                        |\n\n1.  Gráfico de Dispersión (`geom_point()`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Edad, y = Ingreso)) +\n  geom_point(size = 3, \n             shape = 16, \n             color = \"blue\", \n             alpha = 0.7, \n             stroke = 1) +\n  labs(title = \"Gráfico de Dispersión\", \n       x = \"Edad\", \n       y = \"Ingreso\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-83-1.png)\n:::\n:::\n\n\n\n\n\n2.Histograma (`geom_histogram()`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Ingreso)) +\n  geom_histogram(bins = 10, \n                 fill = \"steelblue\", \n                 color = \"black\", \n                 alpha = 0.7, \n                 boundary = 0) +\n  labs(title = \"Histograma de Ingresos\", \n       x = \"Ingreso\", \n       y = \"Frecuencia\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-84-1.png)\n:::\n:::\n\n\n\n\n\n3.  Boxplot (`geom_boxplot()`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Genero, \n               y = Ingreso, \n               fill = Genero)) +\n  geom_boxplot(outlier.color = \"darkgreen\") +\n  labs(title = \"Boxplot de Ingreso por Género\", \n       x = \"Género\", \n       y = \"Ingreso\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-85-1.png)\n:::\n:::\n\n\n\n\n\n4.  Gráfico de Barras (`geom_bar()`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Educacion, \n               fill = Educacion)) +\n  geom_bar(width = 0.7, \n           alpha = 0.8, \n           color = \"black\") +\n  labs(title = \"Frecuencia de Nivel Educativo\", \n       x = \"Nivel Educativo\", \n       y = \"Cantidad\",\n       fill = \"Niv. Ed.\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-86-1.png)\n:::\n:::\n\n\n\n\n\n5.  Gráfico de Líneas (`geom_line()`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nencuesta %>% \n  sample_n(20) %>% \nggplot(aes(x = Edad, y = Ingreso)) +\n  geom_line(color = \"blue\", size = 1, linetype = \"dashed\") +\n  geom_point(size = 3, color = \"red\") +\n  labs(title = \"Relación Edad vs Ingreso\", x = \"Edad\", y = \"Ingreso\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-87-1.png)\n:::\n:::\n\n\n\n\n\n6.  Gráfico de Densidad (`geom_density()`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Ingreso)) +\n  geom_density(fill = \"lightblue\", \n               alpha = 0.7, \n               adjust = 1.5, \n               linetype = \"solid\") +\n  labs(title = \"Densidad de Ingresos\", \n       x = \"Ingreso\", \n       y = \"Densidad\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-88-1.png)\n:::\n:::\n\n\n\n\n\n7.  Gráfico de Área (`geom_area()`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Edad, \n               y = Ingreso)) +\n  geom_area(fill = \"darkgreen\", \n            alpha = 0.5, \n            linetype = \"dotted\", \n            color = \"black\") +\n  labs(title = \"Área de Relación Edad vs Ingreso\", \n       x = \"Edad\", \n       y = \"Ingreso\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-89-1.png)\n:::\n:::\n\n\n\n\n\n8.  Facetas con `facet_wrap()`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Ingreso, \n                     fill = Genero)) +\n  geom_histogram(bins = 10, \n                 alpha = 0.7, \n                 color = 'black') +\n  facet_wrap(~Genero) +\n  labs(title = \"Histograma de Ingresos por Género\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-90-1.png)\n:::\n:::\n\n\n\n\n\n9.  Gráfico de Barras Apilado (`position = \"stack\"`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Educacion, \n                     fill = Genero)) +\n  geom_bar(position = \"stack\", \n           alpha = 0.8, \n           width = 0.7) +\n  labs(title = \"Distribución de Género por Nivel Educativo\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-91-1.png)\n:::\n:::\n\n\n\n\n\n10. Gráfico de Barras Apilado Proporcional (`position = \"fill\"`)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Educacion, \n                     fill = Genero)) +\n  geom_bar(position = \"fill\") +\n  labs(title = \"Proporción de Género por Nivel Educativo\", \n       y = \"Proporción\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-92-1.png)\n:::\n:::\n\n\n\n\n\n11. Gráfico de Violin (`geom_violin()`)\n\nUn gráfico de violín combina un boxplot y una curva de densidad, mostrando la distribución de una variable numérica a lo largo de una categórica. Permite visualizar la mediana, la dispersión y la forma de la distribución.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(encuesta, aes(x = Genero, \n                     y = Ingreso, \n                     fill = Genero)) +\n  geom_violin(trim = FALSE, \n              draw_quantiles = c(0.25, 0.5, 0.75)) +\n  labs(title = \"Distribución del Ingreso por Género\", \n       x = \"Género\", \n       y = \"Ingreso\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-93-1.png)\n:::\n:::\n\n\n\n\n\n12. Gráfico de Dispersión con Regresión (`geom_smooth()`)\n\n-   `method = \"lm\"`: Usa regresión lineal.\n-   `se = TRUE`: Muestra el intervalo de confianza.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nencuesta %>% \n  sample_n(50) %>% \nggplot(aes(x = Edad, y = Ingreso)) +\n  geom_point(size = 3, color = \"blue\") +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Regresión Lineal de Edad vs Ingreso\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-94-1.png)\n:::\n:::\n\n\n\n\n\n## Complementos de ggplot2\n\nEl sistema de visualización de datos en R basado en `ggplot2` ofrece una gran flexibilidad y control para generar gráficos informativos. Sin embargo, siempre podemos ir un paso más allá, ya sea para mejorar la estética, destacar información clave o combinar varias visualizaciones. Para ello, existen una serie de paquetes que complementan a `ggplot2` y amplían significativamente sus capacidades.\n\nUtilicemos los datos de `gapminder` filtrados al 2007 como ejemplo:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\ngm_07 = gapminder %>% filter(year == 2007)\n```\n:::\n\n\n\n\n\n1.  `ggsci`[@ggsci]\n\nEste paquete proporciona paletas de colores inspiradas en publicaciones científicas reconocidas como *Nature*, *JAMA*, *Lancet*, *NEJM*, entre otras. Es útil cuando se busca una estética profesional y reconocible, especialmente para presentaciones o publicaciones.\n\nLa funciones principales son: `scale_fill_nejm()`, `scale_fill_lancet()`, `scale_fill_jama()` permiten aplicar directamente estas paletas en gráficos con `fill`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggsci)\n```\n:::\n\n\n\n\n\nNJEJM:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = continent, \n                  y = lifeExp, \n                  fill = continent)) +\n  geom_boxplot() +\n  scale_fill_nejm() +\n  theme_minimal() +\n  ggtitle(\"Boxplot con paleta NEJM\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-97-1.png)\n:::\n:::\n\n\n\n\n\nLancet:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = continent, \n                  y = lifeExp, \n                  fill = continent)) +\n  geom_boxplot() +\n  scale_fill_lancet() +\n  theme_minimal() +\n  ggtitle(\"Boxplot con paleta Lancet\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-98-1.png)\n:::\n:::\n\n\n\n\n\nJAMA:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = continent, \n                  y = lifeExp, \n                  fill = continent)) +\n  geom_boxplot() +\n  scale_fill_jama() +\n  theme_minimal() +\n  ggtitle(\"Boxplot con paleta JAMA\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-99-1.png)\n:::\n:::\n\n\n\n\n\n2.  `viridis`\n\n`viridis` ofrece escalas de color perceptualmente uniformes, es decir, los colores cambian de manera coherente incluso para personas con discapacidad visual o en impresión en blanco y negro. Estas paletas fueron desarrolladas originalmente para Python y se adaptaron a R.\n\n-   Las funciones principales son: `scale_fill_viridis_d()` para variables categóricas y `scale_fill_viridis_c()` para variables continuas.\n-   Los argumentos más importantes son:\n    -   `option` permite seleccionar entre variantes (\"A\", \"B\", \"C\", \"D\", \"E\").\n    -   `direction` para invertir el orden de los colores.\n    -   `guide = 'none'` oculta la leyenda, útil en gráficos facetados.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)\n```\n:::\n\n\n\n\n\nTema 'plasma':\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = lifeExp, \n                  fill = continent)) +\n  geom_histogram(binwidth = 3, \n                 color = \"black\", \n                 alpha = 0.8) +\n  scale_fill_viridis_d(guide = 'none', \n                       option = 'C') +\n  facet_wrap(~ continent) +\n  theme_minimal() +\n  ggtitle(\"Histograma de esperanza de vida por continente\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-101-1.png)\n:::\n:::\n\n\n\n\n\nTema 'cividis':\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = lifeExp, \n                  fill = continent)) +\n  geom_histogram(binwidth = 3, \n                 color = \"black\", \n                 alpha = 0.8) +\n  scale_fill_viridis_d(guide = 'none', \n                       option = 'E') +\n  facet_wrap(~ continent) +\n  theme_minimal() +\n  ggtitle(\"Histograma de esperanza de vida por continente\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-102-1.png)\n:::\n:::\n\n\n\n\n\nPuede consultar las paletas usando `?scale_fill_viridis`\n\n3.  `patchwork` [@patchwork]\n\nEste paquete permite combinar múltiples gráficos generados con `ggplot2` de forma intuitiva mediante operadores aritméticos. Es especialmente útil para mostrar comparaciones o construir narrativas visuales. - Los gráficos se combinan con `/` (vertical), `|` (horizontal), y `+` para anotaciones conjuntas. - No requiere transformar los gráficos en objetos de grid. Basta con construir gráficos individuales y luego combinarlos directamente.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Boxplot de lifeExp \np1 = ggplot(gm_07, aes(x = lifeExp, \n                       y = '')) +\n  geom_boxplot(fill = \"darkgreen\", \n               width = 0.4) +\n  theme_minimal() +\n  labs(title = \"Boxplot de esperanza de vida\", \n       x = NULL, \n       y = \"lifeExp\")\n\n# Densidad de lifeExp\np2 = ggplot(gm_07, aes(x = lifeExp)) +\n  geom_density(fill = \"darkgreen\", \n               alpha = 0.6) +\n  theme_minimal() +\n  labs(title = \"Densidad de esperanza de vida\", \n       x = \"lifeExp\", \n       y = \"Densidad\")\n\n# Histograma de lifeExp\np3 = ggplot(gm_07, aes(x = lifeExp)) +\n  geom_histogram(binwidth = 3, \n                 fill = \"darkgreen\", \n                 color = \"black\", \n                 alpha = 0.7) +\n  theme_minimal() +\n  labs(title = \"Histograma de esperanza de vida\", \n       x = \"lifeExp\", \n       y = \"Frecuencia\")\n\n# Gráficos apilados verticalmente\n(p1 / p2 / p3)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-104-1.png)\n:::\n:::\n\n\n\n\n\n4.  `ggthemes` [@ggthemes]\n\nProporciona temas visuales inspirados en medios de comunicación como *The Economist*, *Wall Street Journal* o *FiveThirtyEight*. Estos temas cambian fondo, ejes, tipografía y estilo general del gráfico. Son ideales para producir gráficos estilizados sin necesidad de personalizar manualmente cada elemento gráfico.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)\n```\n:::\n\n\n\n\n\nThe Economist:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = continent, \n                  y = lifeExp, \n                  fill = continent)) +\n  geom_boxplot() +\n  theme_economist() +\n  scale_fill_economist() +\n  labs(fill = 'Continente') +\n  ggtitle(\"Estilo The Economist\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-106-1.png)\n:::\n:::\n\n\n\n\n\nWall Street Journal:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = continent, \n                  y = lifeExp, \n                  fill = continent)) +\n  geom_boxplot() +\n  theme_wsj() +\n  scale_fill_economist() +\n  labs(fill = 'Continente') +\n  ggtitle(\"Estilo Wall Street Journal\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-107-1.png)\n:::\n:::\n\n\n\n\n\n5.  `ggtext` [@ggtext]\n\nEste paquete permite utilizar etiquetas enriquecidas con HTML y Markdown dentro de `ggplot2`. Esto incluye títulos con colores, negritas, saltos de línea y estilos diferenciados por palabra.\n\n-   Funciones clave:\n    -   `element_markdown()` reemplaza a `element_text()` en `theme()` para permitir etiquetas enriquecidas.\n-   Requiere que las etiquetas sean pasadas a `ggtitle()` o `labs()` como texto procesable por `glue::glue()` o expresiones con HTML/Markdown.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggtext)\n```\n:::\n\n\n\n\n\nEstablecemos la relación entre color y continente:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Colores personalizados para cada continente\ncolores_continente = c(\n  Africa = \"#E63946\",\n  Americas = \"#457B9D\",\n  Asia = \"#2A9D8F\",\n  Europe = \"#F4A261\",\n  Oceania = \"#A17DB2\"\n)\n\n# Creamos el título con etiquetas coloreadas en HTML\ntitulo_color = glue::glue(\n  \"Esperanza de vida en 2007 por continente<br>\",\n  \"<span style='color:{colores_continente['Africa']}'>**África**</span>, \",\n  \"<span style='color:{colores_continente['Americas']}'>**Américas**</span>, \",\n  \"<span style='color:{colores_continente['Asia']}'>**Asia**</span>, \",\n  \"<span style='color:{colores_continente['Europe']}'>**Europa**</span>, \",\n  \"<span style='color:{colores_continente['Oceania']}'>**Oceanía**</span>\"\n)\n```\n:::\n\n\n\n\n\nGraficamos:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Gráfico final\nggplot(gm_07, aes(x = continent, \n                  y = lifeExp, \n                  fill = continent)) +\n  geom_boxplot() +\n  scale_fill_manual(values = colores_continente) +\n  labs(y = 'Esperanza de vida') +\n  theme_minimal() +\n  theme(\n    axis.title.x = element_blank(),\n    axis.text.x = element_blank(),\n    axis.ticks.x = element_blank(),\n    plot.title = element_markdown(size = 14, \n                                  lineheight = 1.2),\n    legend.position = \"none\"\n  ) +\n  ggtitle(titulo_color)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-110-1.png)\n:::\n:::\n\n\n\n\n\n6.  `scales` [@scales]\n\nOfrece herramientas para transformar y dar formato a valores numéricos en los ejes o leyendas de `ggplot2`. Muy útil para mostrar cifras monetarias, porcentajes o unidades más legibles.\n\n-   Existen funciones muy comunes como: `dollar_format()`, `percent_format()`, `comma_format()`, entre otras.\n-   Algunos argumentos importantes son: `prefix` o `suffix` permiten añadir símbolos o unidades y `accuracy` controla el número de decimales.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\n```\n:::\n\n\n\n\n\nPodemos utilizarlo para monedas:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = gdpPercap,\n                  y = lifeExp)) +\n  geom_point(color = \"steelblue\", \n             size = 3, \n             alpha = 0.8) +\n  scale_x_continuous(labels = dollar_format(prefix = \"US$\")) +\n  theme_minimal() +\n  ggtitle(\"Relación entre PIB per cápita y esperanza de vida (USD, 2007)\") +\n  labs(x = \"PIB per cápita (US$)\", \n       y = \"Esperanza de vida (años)\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-112-1.png)\n:::\n:::\n\n\n\n\n\nO para porcentajes:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clasificamos esperanza de vida\ngm_07 = gm_07 %>%\n  mutate(nivel = cut(lifeExp, breaks = c(0, 60, 75, Inf), \n                     labels = c(\"Baja\", \"Media\", \"Alta\")))\n\n# Gráfico debarra horizontal dividida por proporción y continente\nggplot(gm_07, aes(y = continent, \n                  fill = nivel)) +\n  geom_bar(position = \"fill\", \n           color = \"black\") +\n  scale_x_continuous(labels = percent_format(accuracy = 1), \n                     trans = \"reverse\") +\n  labs(title = \"Distribución proporcional de esperanza de vida por continente (2007)\",\n       x = \"Porcentaje\",\n       y = NULL,\n       fill = \"Esperanza de vida\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-113-1.png)\n:::\n:::\n\n\n\n\n\n7.  `gghighlight` [@gghighlight]\n\nFacilita la tarea de destacar subconjuntos de datos directamente en los gráficos sin tener que filtrar manualmente. Ideal para llamar la atención sobre casos atípicos, valores extremos o categorías específicas. - `gghighlight()` se añade como capa dentro del `ggplot` y permite condicionar el resaltado a una expresión lógica. - Argumentos útiles: - `label_key` permite mostrar etiquetas automáticas para los datos resaltados. - `use_direct_label = TRUE` mejora la legibilidad de gráficos con muchos elementos.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gghighlight)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gm_07, aes(x = log(gdpPercap), \n                  y = lifeExp, \n                  label = country)) +\n  geom_point(size = 3, \n             alpha = 0.8) +\n  gghighlight(lifeExp > 82, \n              label_key = country) +\n  theme_minimal() +\n  ggtitle(\"Países con esperanza de vida mayor a 82 en 2007\")\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-115-1.png)\n:::\n:::\n\n\n\n\n\n## Dlookr para análisis exploratorio\n\nEl análisis exploratorio de datos (EDA) es una etapa crucial antes de aplicar cualquier modelo o técnica inferencial. Permite comprender la estructura de los datos, detectar valores atípicos, evaluar supuestos y descubrir patrones relevantes. El paquete `dlookr` fue diseñado específicamente para facilitar esta etapa.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dlookr)\n```\n:::\n\n\n\n\n\n1.  Resumen de Datos y Diagnóstico con `dlookr`\n\nEl paquete `dlookr` permite realizar diagnósticos detallados sobrela información en cada una de las variables en un `data.frame`.\n\n-   Número de observaciones\n\n-   Cantidad de valores perdidos por variable\n\n-   Número de valores únicos\n\n-   Tipo de dato de cada variable\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiagnose(encuesta)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  variables    types     missing_count missing_percent unique_count unique_rate\n  <chr>        <chr>             <int>           <dbl>        <int>       <dbl>\n1 ID           numeric               0               0          500       1    \n2 Edad         numeric               0               0           44       0.088\n3 Genero       character             0               0            2       0.004\n4 Ingreso      numeric               0               0          451       0.902\n5 Educacion    character             0               0            3       0.006\n6 Satisfaccion numeric               0               0            5       0.01 \n```\n\n\n:::\n:::\n\n\n\n\n\n2.  Resumen de Variables Numéricas con `dlookr`\n\nPara obtener un **resumen detallado de las variables numéricas**, usamos `diagnose_numeric()`.\n\n-   Media, mediana, desviación estándar y varianza\n\n-   Valores mínimo y máximo\n\n-   Coeficiente de asimetría (Skewness) y curtosis\n\n-   Valores atípicos detectados\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiagnose_numeric(encuesta)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 10\n  variables      min    Q1    mean median    Q3   max  zero minus outlier\n  <chr>        <dbl> <dbl>   <dbl>  <dbl> <dbl> <dbl> <int> <int>   <int>\n1 ID               1  126.  250.     250.  375.   500     0     0       0\n2 Edad            18   29    35.5     35    42     65     0     0       1\n3 Ingreso       1000 2322. 2785.    2746. 3237.  4903     0     0       1\n4 Satisfaccion     1    2     2.89     3     3      5     0     0      15\n```\n\n\n:::\n:::\n\n\n\n\n\n3.  Resumen de Variables Categóricas con `dlookr`\n\nPara describir las **variables categóricas**, usamos `diagnose_category()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Diagnóstico de variables categóricas\ndiagnose_category(encuesta)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  variables levels            N  freq ratio  rank\n  <chr>     <chr>         <int> <int> <dbl> <int>\n1 Genero    F               500   251  50.2     1\n2 Genero    M               500   249  49.8     2\n3 Educacion Universitaria   500   248  49.6     1\n4 Educacion Secundaria      500   152  30.4     2\n5 Educacion Primaria        500   100  20       3\n```\n\n\n:::\n:::\n\n\n\n\n\nEste diagnóstico proporciona:\n\nFrecuencias absolutas y relativas de cada categoría Cantidad de valores únicos en cada variable categórica\n\nSi queremos visualizar mejor la distribución de una variable categórica, podemos utilizar `count()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(encuesta, Educacion)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  Educacion         n\n  <chr>         <int>\n1 Primaria        100\n2 Secundaria      152\n3 Universitaria   248\n```\n\n\n:::\n:::\n\n\n\n\n\n4.  Identificación de Valores Atípicos con `dlookr`\n\n`dlookr` también nos permite detectar **valores atípicos** en las variables numéricas.\n\nEsto mostrará:\n\n-   Cuántos valores atípicos existen\n\n-   Cuáles son esos valores extremos\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiagnose_outlier(encuesta)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  variables    outliers_cnt outliers_ratio outliers_mean with_mean without_mean\n  <chr>               <int>          <dbl>         <dbl>     <dbl>        <dbl>\n1 ID                      0            0             NaN    250.         250.  \n2 Edad                    1            0.2            65     35.5         35.4 \n3 Ingreso                 1            0.2          4903   2785.        2780.  \n4 Satisfaccion           15            3               5      2.89         2.83\n```\n\n\n:::\n:::\n\n\n\n\n\n5.  Gráficos Descriptivos con `dlookr`\\*\n\nPodemos graficar la **distribución de nuestras variable numérica** con `plot_hist_numeric()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_hist_numeric(encuesta)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-122-1.png)\n:::\n:::\n\n\n\n\n\nPodemos usar también `plot_box_numeric()` para ver **valores atípicos** y la distribución de la variables numéricas.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_box_numeric(encuesta)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-123-1.png)\n:::\n:::\n\n\n\n\n\nPodemos usar también `plot_normality` para evaluar la normalidad de cada variable numérica y sus tranformaciones.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_normality(encuesta)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-124-1.png)\n:::\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-124-2.png)\n:::\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-124-3.png)\n:::\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-124-4.png)\n:::\n:::\n\n\n\n\n\nPodemos visualizar la frecuencia del variables categóricas con `plot_bar_category()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_bar_category(encuesta)\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-125-1.png)\n:::\n:::\n\n\n\n\n\n6.  Análisis Exploratorio de Correlaciones con `correlate`\n\nPara examinar relaciones entre variables numéricas, podemos usar `correlate()`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Matriz de correlaciones\nencuesta %>% \n  select(Edad, Ingreso, Satisfaccion) %>% \n  correlate()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  var1         var2         coef_corr\n  <fct>        <fct>            <dbl>\n1 Ingreso      Edad             0.682\n2 Satisfaccion Edad             0.284\n3 Edad         Ingreso          0.682\n4 Satisfaccion Ingreso          0.500\n5 Edad         Satisfaccion     0.284\n6 Ingreso      Satisfaccion     0.500\n```\n\n\n:::\n:::\n\n\n\n\n\nPara visualizar las correlaciones, utilizamos `plot_correlate()`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Gráfico de correlaciones\nencuesta %>% \n  select(Edad, Ingreso, Satisfaccion) %>% \n  plot_correlate()\n```\n\n::: {.cell-output-display}\n![](glosariofunciones_files/figure-epub/unnamed-chunk-127-1.png)\n:::\n:::\n",
    "supporting": [
      "glosariofunciones_files/figure-epub"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}